<?php
include_once BASE_PATH . '\classes\clsBase.php';
include_once BASE_PATH . '\classes\masters\cls_gen_biz_client.php';
include_once BASE_PATH . '\classes\masters\cls_gen_biz_work_type.php';
include_once BASE_PATH . '\classes\masters\cls_gen_employee.php';

class cls_client_work_planner extends clsBase
{
	public $m_pk_client_work_planner_id=0;
	public $m_fk_uk_client_code="";
	public $m_fk_uk_work_type_code="";
	public $m_fk_uk_employee_code="";
	public $m_for_year_from="";
	public $m_for_year_to="";
	public $m_work_periodicity_type="";
	public $m_dead_line_date="";
	public $m_current_status="";
	public $m_current_remark="";
	public $m_current_status_update_on="";
	public $m_deletedtype='s';
	public $m_deleted_by=1;
	public $m_p_xml="";
	public $dbal;

	function __construct()
	{		
		parent::connect();	
		$this->dbal= new DBAL($this->myLink);
	}

	public function Add()
	{
		try{
			$this->mUpdatedby=1;
			$this->mCreatedBy=1;
			$sql = 'CALL spt_iu_trsc_biz_client_work_planner("'.$this->m_p_xml.'")';
			//echo $sql ;
			$result = $this->dbal->execScalar($sql,true);
			//echo "execScalar=". $result;
			return $result;
		}catch (Exception $ex){
			$this->WriteLog($ex);
		}
	}

	public function Update()
	{
		try{
			$sql = "CALL spt_iu_trsc_biz_client_work_planner('".$this->m_p_xml."')";
			$result = $this->dbal->execScalar($sql,false);
			echo $result;
		}catch (Exception $ex){
			$this->WriteLog($ex);
		}
	}

	public function Delete()
	{
		try{
			$sql = "CALL spm_sfd_mst_biz_department(".$this->m_pk_department_id.",".$this->m_deleted_by.",'".$this->m_deletedtype."')";
			//echo "Delete sql : ".$sql ;
			$result = $this->dbal->execScalar($sql,false);
			return $result;
		}catch (Exception $ex)
		{
			$this->WriteLog($ex);
		}
	}
	
	public function getAllMastersRequired(){
		try {
			$req_deps ['client_work_planner'] = ""; 
			//Client 
			/*$jsonClient = "";
			//echo "cls_gen_biz_client";
			$objClient =  new cls_gen_biz_client();//
			$jsonClient = '{"uk_client_code":"*","client_name":"<New Client>"}';
			$jsonClient .= $objClient ->GetData(SELECT_MODE_TABLE,SELECT_RETURN_TYPE_JSONSTRING,'mst_biz_client','uk_client_code, client_name', "");
			$req_deps ['client'] = $jsonClient;
			$objClient = null;*/
			//Work Type
			//echo "cls_gen_biz_work_type";
			$jsonWorkType = "";
			$objWorkType =  new cls_gen_biz_work_type();
			//$new_jsonWorkType = '{"uk_work_type_code":"*","work_name":"<New Work Type>"}';
			$jsonWorkType = $objWorkType->GetData(SELECT_MODE_TABLE,SELECT_RETURN_TYPE_JSONSTRING,'mst_biz_work_type','uk_work_type_code, work_name', "");
			//$jsonWorkType = $this->addItemToJSONString($jsonWorkType, $new_jsonWorkType);			
			$req_deps ['worktype'] = $jsonWorkType ;
			$objWorkType = null;
			//Employee
			//echo "cls_gen_employee";
			$jsonEmployee= "";			
			$objEmployee=  new cls_gen_employee();
			$jsonEmployee= $objEmployee->GetData(SELECT_MODE_TABLE,SELECT_RETURN_TYPE_JSONSTRING,'vm_for_employee','uk_employee_code, employee_name', "");
			$req_deps ['employee'] = $jsonEmployee;
			$objEmployee = null;
			//Parent Ledger
			
			return json_encode($req_deps);
					
		} catch (Exception $e) {
			$this->WriteLog($ex);
		}
	}
	
	public function GetData($mode = SELECT_MODE_VIEW, $returntype =SELECT_RETURN_TYPE_JSONSTRING, $dbobj="",$projectionList="*",$filter="")
	{
		switch($mode)
		{
			case SELECT_MODE_VIEW:
				$sql = " SELECT ". $projectionList ." FROM ". $dbobj . (($filter == "")? "" : " WHERE " . $filter);

				break;
			case SELECT_MODE_TABLE :
				$sql = " SELECT ". $projectionList ." FROM ". $dbobj . (($filter == "")? "" : " WHERE " . $filter);

				break;
			case SELECT_MODE_SP:
				$sql = "CALL ". $dbobj . ($filter == "")? "" : "(". $filter .")";

				break;
			default:
				$sql = " SELECT ". $projectionList ." FROM ". $dbobj . ($filter == "")? "" : " WHERE " . $filter;
				break;
		}
		//echo ($sql);
		//$sql = " SELECT ". $projectionList ." FROM ". $dbobj ;//. ($filter == "")? "" : " WHERE " . $filter;

		$qry_res = $this->dbal->execReader($sql);

	if($qry_res)
		{
			$rec_set = $this->dbal->fetchData($qry_res, true);
			//print_r($rec_set);
		}else {
			//echo "no data";
			return "NODATA";
		}

		if($rec_set)
		{
			if($returntype == SELECT_RETURN_TYPE_JSONSTRING )
			{
				$return_str = json_encode($rec_set);				
				return $this->sanitizeBlankJSONRecordset($return_str);
			}
		}else{
			return $this->sanitizeBlankJSONRecordset();
		}	
	}
}
?>