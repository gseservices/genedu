

pk_college_type_id, college_type, college_type_code from mstcollegetype where deleted='N'

select pk_feecategory_id, feecategory_name from mstfeecategory where
deleted='N'

select courseId, courseName, courseType, mediumid, corsecode from mstcourse where deleted=’N' 

select pk_castecategory_id, castecategory_name from mstcastecategory where deleted=’N'

select pk_div_id, fk_course_id, div_name from mstdivision where where deleted=’N'


// create procedure for Receipt New --> get fees detail using PRN No. & academic year
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `spt_get_fees_details_for_prn`(IN `var_prn` INT(11), 
	IN `var_academic_year` VARCHAR(20))
    READS SQL DATA
    COMMENT 'retrieves fees details for given PRN number'
BEGIN

declare var_total_fees double(10,2);
declare var_paid_fees double(10,2);

SELECT sum(amount_to_pay) into var_total_fees FROM `mstfeesheadagainstadmission` 
	WHERE fk_admission_id =(select pk_admission_id from mstadmission where prn_no=var_prn and academic_year=var_academic_year) 
	and installment=1;

select sum(paid_amt) into var_paid_fees from transmfeesreciept 
where `fk_admission_id`=(select pk_admission_id from mstadmission where prn_no=var_prn and academic_year=var_academic_year) 
and rcpt_type != 'Concession';


select pk_admission_id, concat(firstName , ' ',middlename,' ',surname) as student_name, 
	var_total_fees as total_fees, var_paid_fees as paid_fees from mstadmission 
	where prn_no=var_prn and academic_year=var_academic_year;
	
select fees_type, amount_to_pay,(case when fees_type='Admission' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = var_admission_id and rcpt_type='Regular') when fees_type='Transport' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = var_admission_id and rcpt_type='Transport') END) as PaidAmt, (amount_to_pay - (case when fees_type='Admission' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = var_admission_id and rcpt_type='Regular') when fees_type='Transport' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = var_admission_id and rcpt_type='Transport') END)) as BalanceAmt from mstfeesheadagainstadmission  where fk_admission_id = var_admission_id and fees_type in ('Admission','Transport') and installment =1;




END;;
DELIMITER ;


// get paid amount receipt type wise -- Regular / Transport
select sum(paid_amt),rcpt_type from transmfeesreciept 
where `fk_admission_id`=(select pk_admission_id from mstadmission where prn_no=1600 and academic_year='2014 - 2015') 
and rcpt_type != 'Concession' group by rcpt_type

===================
14 July 2015
===================

select * from mstadmission where prn_no=1600 and academic_year = '2014 - 2015'

select rcpt_type as Particular, sum(paid_amt) as PaidAmt, sum(current_balance) as BalanceAmt from transmfeesreciept where fk_admission_id = 3052 group by `rcpt_type` order by rcpt_type;

select fees_type, amount_to_pay,(case when fees_type='Admission' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = 3052 and rcpt_type='Regular') when fees_type='Transport' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = 3052 and rcpt_type='Transport') END) as PaidAmt, (amount_to_pay - (case when fees_type='Admission' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = 3052 and rcpt_type='Regular') when fees_type='Transport' then (select sum(paid_amt) from transmfeesreciept where fk_admission_id = 3052 and rcpt_type='Transport') END)) as BalanceAmt from mstfeesheadagainstadmission  where fk_admission_id = 3052 and fees_type in ('Admission','Transport') and installment =1;



select pk_reciept_id, receip_code, rcpt_no, reciept_date, pay_mode, ch_dd_no, ch_dd_date, paid_amt, rcpt_type from transmfeesreciept where fk_admission_id = 3052;

select distinct rcpt_type from transmfeesreciept;

select * from mstfeesheadagainstadmission where installment = 1 and paid_amt > 0



select pk_admission_id, concat(firstName , ' ',middlename,' ',surname) as student_name from mstadmission where prn_no=1600 and academic_year = '2014 - 2015'

select pk_admission_id, concat(firstName , ' ',middlename,' ',surname) as student_name from mstadmission where pk_admission_id = 3052

===================
15 July 2015
===================

select * from transmfeesreciept where pk_reciept_id = (select max(pk_reciept_id) from transmfeesreciept)


CALL spt_iu_transmfeesreciept('','0',2731,'2015-6-15','Cash','','','2015-6-15','','','',26700,100,26600,'rem',1,1,0,'Regular','N','PSBA','','N',@varreciept_code_return)

select * from transmfeesreciept where pk_reciept_id > 19900

select * from test

SET @p0='1'; SET @p1='test1'; CALL `spt_iu_test`(1, 'test2');

===================
17 July 2015
===================

BEGIN
declare collegeType_Code varchar(10);
declare varaccount_id int(10);
declare installment_no INT unsigned default 1;
declare r_recieptId INT;
declare Vch_XML varchar(8000);
DECLARE credit_ledger_id int;
DECLARE debit_ledger_id int;
DECLARE newreturnid int(11) DEFAULT 0;
DECLARE var_receipt_no varchar(255) DEFAULT '';
DECLARE varCompCode varchar(50);
	DECLARE varConcessionId int(11);

start transaction;


	if varpk_reciept_id  <= 0 then
		
			select max(`installment`) into installment_no from  mstfeesheadagainstadmission where `fk_admission_id`=`varfk_admission_id`; 
				if installment_no is null then
				set installment_no=1;
				else
				set installment_no = installment_no+1;
				end if;
		set @newid = `varfk_admission_id`;
		
		
		if `varpaid_amt`=0 then
			if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
				call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,-2,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
				else 
				call spm_iu_mstfeesheadagainstother(p_xml, @newid,-2,installment_no,'y'); 
			end if;
		else

		if  `varrcpt_type` = "Transport" THEN
				SELECT settingValue into collegeType_Code from tranapplicationsetting where settingKey = 'Bus_Receipt_Code';
			ELSE
				select `college_type_code` into collegeType_Code from view_for_course_college_code where `pk_admission_id`=`varfk_admission_id`;
		end IF;
		set @rec_code=fn_get_reciept_code(`varreciept_date`,`collegeType_Code`);
		set varreciept_code_return=concat(@rec_code,`collegeType_Code`);
		
		
		if `varrcpt_type` = "Transport" THEN

       
				set varCompCode = fn_getCompanyCode(2);
		ELSE	
			
				set varCompCode = fn_getCompanyCode(1);
		END if;

		
		
		
		if UPPER(var_is_rcpt_no_manual) ='Y' THEN		
			set var_receipt_no = varrcpt_no;
		ELSE
			select spm_get_new_reciept_no(varCompCode) into var_receipt_no;
		end IF;

		 
		INSERT INTO  `transmfeesreciept` (`receip_code`, `fk_company_code`,`rcpt_no`, `fk_admission_id`, `reciept_date`, `pay_mode`, `ch_dd_ac_no`, `ch_dd_no`, `ch_dd_date`, `ch_dd_bbranch`, `ch_dd_bank`, `ch_dd_status`, `previous_balance`, `paid_amt`, `current_balance`, `remark`,`rcpt_type`,`is_admission`,`rcp_installment`, `created_on`, `created_by`, `modified_by`) VALUES  ( concat(@rec_code,`collegeType_Code`), varCompCode ,var_receipt_no, `varfk_admission_id`, `varreciept_date`, `varpay_mode`, `varch_dd_ac_no`, `varch_dd_no`, `varch_dd_date`, `varch_dd_bbranch`, `varch_dd_bank`, `varch_dd_status`, `varprevious_balance`, `varpaid_amt`, `varcurrent_balance`, `varremark`,`varrcpt_type`,`varis_admission`,`installment_no`, now(), `varcreated_by`, `varmodified_by`);
		 set newreturnid =  last_insert_id();
	set varConcessionId = last_insert_id();
		select  last_insert_id() as newreturnid;
		set @receipt_id = last_insert_id() ;
		set r_recieptId=@receipt_id;
		if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
				call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,@receipt_id,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
				else 
				call spm_iu_mstfeesheadagainstother(p_xml, @newid,@receipt_id,installment_no,'y'); 
		end if;
		


			end if;
end if;


commit;




END


=== our procedure ==
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `spt_iu_transmfeesreciept`(IN varreceip_code varchar (50),  varrcpt_no varchar (20), varfk_admission_id int (11), varreciept_date datetime , varpay_mode enum ('Cash','Cheque','DD','Bank','eTransfer'), varch_dd_ac_no varchar (20), varch_dd_no varchar (20), varch_dd_date datetime ,varch_dd_bbranch varchar (250), varch_dd_bank varchar (250), varch_dd_status char(1), varprevious_balance double (10,2), varpaid_amt double (10,2), varcurrent_balance double (10,2), varremark varchar (300), varcreated_by int (11), varmodified_by int (11), varpk_reciept_id int (10),varrcpt_type enum ('Regular','Other','Exam','Concession','Transport'),varis_admission char(1), varcollegetype varchar(10), p_xml longtext, var_is_rcpt_no_manual char(1), INOUT  varreciept_code_return varchar (50))
BEGIN
declare collegeType_Code varchar(10);
declare varaccount_id int(10);
declare installment_no INT unsigned default 1;
declare r_recieptId INT;
declare Vch_XML varchar(8000);
DECLARE credit_ledger_id int;
DECLARE debit_ledger_id int;
DECLARE newreturnid int(11) DEFAULT 0;
DECLARE var_receipt_no varchar(255) DEFAULT '';
DECLARE varCompCode varchar(50);
  DECLARE varConcessionId int(11);

start transaction;


  if varpk_reciept_id  <= 0 then
    
      select max(`installment`) into installment_no from  mstfeesheadagainstadmission where `fk_admission_id`=`varfk_admission_id`; 
        if installment_no is null then
        set installment_no=1;
        else
        set installment_no = installment_no+1;
        end if;
    set @newid = `varfk_admission_id`;
    
    
    if `varpaid_amt`=0 then
      if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
        call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,-2,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
        else 
        call spm_iu_mstfeesheadagainstother(p_xml, @newid,-2,installment_no,'y'); 
      end if;
    else

    if  `varrcpt_type` = "Transport" THEN
        SELECT settingValue into collegeType_Code from tranapplicationsetting where settingKey = 'Bus_Receipt_Code';
      ELSE
        select `college_type_code` into collegeType_Code from view_for_course_college_code where `pk_admission_id`=`varfk_admission_id`;
    end IF;
    set @rec_code=fn_get_reciept_code(`varreciept_date`,`collegeType_Code`);
    set varreciept_code_return=concat(@rec_code,`collegeType_Code`);
    
    
    if `varrcpt_type` = "Transport" THEN

       
        set varCompCode = fn_getCompanyCode(2);
    ELSE  
      
        set varCompCode = fn_getCompanyCode(1);
    END if;

    
    
    
    if UPPER(var_is_rcpt_no_manual) ='Y' THEN   
      set var_receipt_no = varrcpt_no;
    ELSE
      select spm_get_new_reciept_no(varCompCode) into var_receipt_no;
    end IF;

     
    INSERT INTO  `transmfeesreciept` (`receip_code`, `fk_company_code`,`rcpt_no`, `fk_admission_id`, `reciept_date`, `pay_mode`, `ch_dd_ac_no`, `ch_dd_no`, `ch_dd_date`, `ch_dd_bbranch`, `ch_dd_bank`, `ch_dd_status`, `previous_balance`, `paid_amt`, `current_balance`, `remark`,`rcpt_type`,`is_admission`,`rcp_installment`, `created_on`, `created_by`, `modified_by`) VALUES  ( concat(@rec_code,`collegeType_Code`), varCompCode ,var_receipt_no, `varfk_admission_id`, `varreciept_date`, `varpay_mode`, `varch_dd_ac_no`, `varch_dd_no`, `varch_dd_date`, `varch_dd_bbranch`, `varch_dd_bank`, `varch_dd_status`, `varprevious_balance`, `varpaid_amt`, `varcurrent_balance`, `varremark`,`varrcpt_type`,`varis_admission`,`installment_no`, now(), `varcreated_by`, `varmodified_by`);
     set newreturnid =  last_insert_id();
  set varConcessionId = last_insert_id();
    select  last_insert_id() as newreturnid;
    set @receipt_id = last_insert_id() ;
    set r_recieptId=@receipt_id;
    if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
        call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,@receipt_id,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
        else 
        call spm_iu_mstfeesheadagainstother(p_xml, @newid,@receipt_id,installment_no,'y'); 
    end if;
    


      end if;
end if;


commit;




END;;
DELIMITER ;

--------

!   C:\wamp\www\current.zip: Cannot create folder current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules
!   The filename or extension is too long.
!   C:\wamp\www\current.zip: Cannot create folder current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list
!   The system cannot find the path specified.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\LICENSE
    Total path and file name length must not exceed 260 characters
!   The system cannot find the path specified.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\package.json
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\proto-list.js
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\README.md
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create folder current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\test
!   The system cannot find the path specified.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\node_modules\proto-list\test\basic.js
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\test\chain-class.js
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\config-chain\test\ignore-unfound-file.js
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create folder current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy
!   The filename or extension is too long.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\LICENSE
    Total path and file name length must not exceed 260 characters
!   The system cannot find the path specified.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\package.json
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\README.md
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create folder current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\test
!   The filename or extension is too long.
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\test\basic.js
    Total path and file name length must not exceed 260 characters
!   C:\wamp\www\current.zip: Cannot create current\genedu\node_modules\grunt-bower-install-simple\node_modules\bower\node_modules\update-notifier\node_modules\latest-version\node_modules\package-json\node_modules\registry-url\node_modules\npmconf\node_modules\once\node_modules\wrappy\wrappy.js
    Total path and file name length must not exceed 260 characters


=============

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `spt_iu_transmfeesreciept`(IN varreceip_code varchar (50),  varrcpt_no varchar (20), varfk_admission_id int (11), varreciept_date datetime , varpay_mode enum ('Cash','Cheque','DD','Bank','eTransfer'), varch_dd_ac_no varchar (20), varch_dd_no varchar (20), varch_dd_date datetime ,varch_dd_bbranch varchar (250), varch_dd_bank varchar (250), varch_dd_status char(1), varprevious_balance double (10,2), varpaid_amt double (10,2), varcurrent_balance double (10,2), varremark varchar (300), varcreated_by int (11), varmodified_by int (11), varpk_reciept_id int (10),varrcpt_type enum ('Regular','Other','Exam','Concession','Transport'),varis_admission char(1), varcollegetype varchar(10), p_xml longtext, var_is_rcpt_no_manual char(1), INOUT  varreciept_code_return varchar (50))
BEGIN
declare collegeType_Code varchar(10);
declare varaccount_id int(10);
declare installment_no INT unsigned default 1;
declare r_recieptId INT;
declare Vch_XML varchar(8000);
DECLARE credit_ledger_id int;
DECLARE debit_ledger_id int;
DECLARE newreturnid int(11) DEFAULT 0;
DECLARE var_receipt_no varchar(255) DEFAULT '';
DECLARE varCompCode varchar(50);
  DECLARE varConcessionId int(11);

start transaction;


  if varpk_reciept_id  <= 0 then
    
      select max(`installment`) into installment_no from  mstfeesheadagainstadmission where `fk_admission_id`=`varfk_admission_id`; 
        if installment_no is null then
        set installment_no=1;
        else
        set installment_no = installment_no+1;
        end if;
    set @newid = `varfk_admission_id`;
    
    
    if `varpaid_amt`=0 then
      if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
        call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,-2,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
        else 
        call spm_iu_mstfeesheadagainstother(p_xml, @newid,-2,installment_no,'y'); 
      end if;
    else

    if  `varrcpt_type` = "Transport" THEN
        SELECT settingValue into collegeType_Code from tranapplicationsetting where settingKey = 'Bus_Receipt_Code';
      ELSE
        select `college_type_code` into collegeType_Code from view_for_course_college_code where `pk_admission_id`=`varfk_admission_id`;
    end IF;
    set @rec_code=fn_get_reciept_code(`varreciept_date`,`collegeType_Code`);
    set varreciept_code_return=concat(@rec_code,`collegeType_Code`);
    
    
    if `varrcpt_type` = "Transport" THEN

       
        set varCompCode = fn_getCompanyCode(2);
    ELSE  
      
        set varCompCode = fn_getCompanyCode(1);
    END if;

    
    
    
    if UPPER(var_is_rcpt_no_manual) ='Y' THEN   
      set var_receipt_no = varrcpt_no;
    ELSE
      select spm_get_new_reciept_no(varCompCode) into var_receipt_no;
    end IF;

     
    INSERT INTO  `transmfeesreciept` (`receip_code`, `fk_company_code`,`rcpt_no`, `fk_admission_id`, `reciept_date`, `pay_mode`, `ch_dd_ac_no`, `ch_dd_no`, `ch_dd_date`, `ch_dd_bbranch`, `ch_dd_bank`, `ch_dd_status`, `previous_balance`, `paid_amt`, `current_balance`, `remark`,`rcpt_type`,`is_admission`,`rcp_installment`, `created_on`, `created_by`, `modified_by`) VALUES  ( concat(@rec_code,`collegeType_Code`), varCompCode ,var_receipt_no, `varfk_admission_id`, `varreciept_date`, `varpay_mode`, `varch_dd_ac_no`, `varch_dd_no`, `varch_dd_date`, `varch_dd_bbranch`, `varch_dd_bank`, `varch_dd_status`, `varprevious_balance`, `varpaid_amt`, `varcurrent_balance`, `varremark`,`varrcpt_type`,`varis_admission`,`installment_no`, now(), `varcreated_by`, `varmodified_by`);
     set newreturnid =  last_insert_id();
  set varConcessionId = last_insert_id();
    select  last_insert_id() as newreturnid;
    set @receipt_id = last_insert_id() ;
    set r_recieptId=@receipt_id;
    if varrcpt_type = "Regular" OR varrcpt_type = "Exam" OR varrcpt_type = "Transport" then
        call spm_iu_mstfeesheadagainstadmission(p_xml, @newid,@receipt_id,installment_no,'y',varpay_mode,varch_dd_ac_no,varch_dd_no,varreciept_code_return); 
        else 
        call spm_iu_mstfeesheadagainstother(p_xml, @newid,@receipt_id,installment_no,'y'); 
    end if;
    


      end if;
end if;


commit;




END;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `spm_iu_mstfeesheadagainstadmission`(IN p_xml text, varfk_admission_id int(11),
varfk_reciept_id int(11), varinstallment_no int(10), isnested char(1),varpay_mode varchar(20),varch_dd_ac_no varchar(20),
varch_dd_no varchar(20),varreceipt_code varchar(25))
BEGIN
  declare v_row_index int unsigned default 0;
  declare v_row_count int unsigned;
  declare v_xpath_row varchar(255);
  DECLARE varcreated_by int(11);
  DECLARE varCompCode VARCHAR(255);

p_xml = '<mstfeesheadagainstadmission><row><field name=\'fk_feesheadadm_id\'>0</field><field name=\'fk_admission_id\'>2731</field><field name=\'fk_reciept_id\'>0</field><field name=\'fk_perticular_id\'>1</field><field name=\'amount_to_pay\'>26100</field><field name=\'paid_amount\'>100</field><field name=\'installment\'>0</field><field name=\'fees_type\'>Admission</field><field name=\'fk_batch_feeshead_id\'>727</field><field name=\'created_by\'>1</field><field name=\'modified_by\'>1</field></row></mstfeesheadagainstadmission>';

  SET varCompCode = fn_getCompanyCode(1);

    
  set v_row_count := extractValue(p_xml,'count(/mstfeesheadagainstadmission/row)');
  
  if isnested ='N'  then
  
    START TRANSACTION;

  end if;

    while v_row_index < v_row_count do        
        set v_row_index := v_row_index + 1;
        set v_xpath_row := concat(
            '/mstfeesheadagainstadmission/row['
        ,   v_row_index
        ,   ']'
        );
        
            insert into mstfeesheadagainstadmission (`fk_admission_id`, `fk_reciept_id`,`fk_perticular_id`, 
            `amount_to_pay`, `paid_amt`, `installment`,`fees_type`, `fk_batch_feeshead_id`,`created_on`, `created_by`,
             `modified_by`) values (
            varfk_admission_id
        ,   varfk_reciept_id
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[4]/text()'))
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[5]/text()'))
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[6]/text()'))
        ,   varinstallment_no
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[8]/text()'))
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[9]/text()'))
        ,   now()
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[10]/text()'))
        ,   extractValue(p_xml,concat(v_xpath_row,'/field[11]/text()'))
        );

    
    SET varcreated_by  = extractValue(p_xml,concat(v_xpath_row,'/field[11]/text()'));


        end while;

    
        IF varfk_reciept_id > 0 THEN
        SELECT PRN into @prn from view_for_reciept WHERE pk_reciept_id = varfk_reciept_id and deleted = 'N' LIMIT 0,1;
          CALL smp_post_voucher_for_reciept(varfk_admission_id,varfk_reciept_id,varCompCode,varpay_mode,varch_dd_ac_no,varch_dd_no,
          varreceipt_code,varcreated_by,@prn);
          CALL smp_post_voucher_for_reciept(varfk_admission_id,varfk_reciept_id,"PST",varpay_mode,varch_dd_ac_no,varch_dd_no,
          varreceipt_code,varcreated_by,@prn);
          
        END IF;

    
  
  if isnested = 'N' then
      commit;
  end if;

     select v_row_index;

END;;
DELIMITER ;

=============

=============

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `spm_iu_tbl_vouchers`(IN varfkbranch_id int (11), varfkacnt_trans_code int (11), varvch_sr_no varchar (20), varvch_date datetime , varfkdebit_ledger_id int (11), varfkcredit_ledger_id int (11), varamount double (11,2), varchq_no varchar (20), varchk_date datetime , varfkbank_acnt_id int (11), varchqstatus char (1), varnarration varchar (250), varremarks varchar (250), varprep_by int (11), varchecked_by int (11), varapproved_by int (11), varrcvd_by int (11), varanchor_id int (11), varanchor_type varchar (100), varfk_comp_code varchar(20),varcreated_by int (11),  varmodified_by int (11), varvch_id int (11), p_xml text)
BEGIN
declare vardeleted char(1) default 'N';
  start transaction;
  
  if varvch_id<= 0 then 
  INSERT INTO  `tbl_vouchers` (`fkbranch_id`, `fkacnt_trans_code`, `vch_sr_no`, `vch_date`, `fkdebit_ledger_id`, `fkcredit_ledger_id`, `amount`, `chq_no`, `chk_date`, `fkbank_acnt_id`, `chqstatus`, `narration`, `remarks`, `prep_by`, `checked_by`, `approved_by`, `rcvd_by`, `anchor_id`, `anchor_type`, `fk_comp_code`,`created_by`, `created_on`, `modified_by`,`deleted` ) VALUES  (`varfkbranch_id`, `varfkacnt_trans_code`, fn_getVchSrNo(), `varvch_date`, `varfkdebit_ledger_id`, `varfkcredit_ledger_id`, `varamount`, `varchq_no`, `varchk_date`, `varfkbank_acnt_id`, `varchqstatus`, `varnarration`, `varremarks`, `varprep_by`, `varchecked_by`, `varapproved_by`, `varrcvd_by`, `varanchor_id`, `varanchor_type`, `varfk_comp_code` ,`varcreated_by`, now(), `varmodified_by`,`vardeleted`);  
  set @newid = last_insert_id();
else
delete from tbl_voucher_det where vch_id = varvch_id;
set @newid = varvch_id;
 UPDATE  `tbl_vouchers` SET `fkbranch_id`  = `varfkbranch_id`, `fkacnt_trans_code`  = `varfkacnt_trans_code`, `vch_sr_no`  = `varvch_sr_no`, `vch_date`  = `varvch_date`, `fkdebit_ledger_id`  = `varfkdebit_ledger_id`, `fkcredit_ledger_id`  = `varfkcredit_ledger_id`, `amount`  = `varamount`, `chq_no`  = `varchq_no`, `chk_date`  = `varchk_date`, `fkbank_acnt_id`  = `varfkbank_acnt_id`, `chqstatus`  = `varchqstatus`, `narration`  = `varnarration`, `remarks`  = `varremarks`, `prep_by`  = `varprep_by`, `checked_by`  = `varchecked_by`, `approved_by`  = `varapproved_by`, `rcvd_by`  = `varrcvd_by`, `anchor_id`  = `varanchor_id`, `anchor_type`  = `varanchor_type`,`fk_comp_code`=`varfk_comp_code`,  `modified_by`  = `varmodified_by` WHERE `vch_id`=`varvch_id`;
    select row_count() as rows_updated;
end if;
  
  
  while @newid > 0  do       
      call spm_iu_mstvoucherdetails (p_xml, @newid,'y',vardeleted); 
     set @newid = 0;
  end while;  
    
  
  commit;
  
  select row_count();   
 
END;;
DELIMITER ;

===========
29 July 2015
============

Array
(
    [t1] => Array
        (
            [0] => Array
                (
                    [newreturnid] => 19926
                )

        )

    [t2] => Array
        (
            [0] => Array
                (
                    [v_row_index] => 2
                )

        )

    [rcpt_code] => Array
        (
            [0] => Array
                (
                    [@varreciept_code_return] => 00012/06/2015/PR
                )

        )

)
Array